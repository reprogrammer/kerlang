(mod Ertest-PROGRAMS is including Ertest-SYNTAX .
  ops dud tup l1 lst pmatch fun1 fun2 fun3 fun4 fun5 fun6 mod1 proc1 : -> Prgm .

  eq dud = (x = [1,2,3].) .

  eq l1 = ( l = [ 1 | [2, 3] ] .) .

  eq fun1 = (
    -module(m).
    i ( x )=> x .
  ) .

  eq fun2 = (
    -module(m).
    i ([x | y])=> x .
  ) .


  eq fun3 = (
    -module(m).
    i (x)=> x .
    
    z = m : i ([1, 2]) .
 ) .

  eq fun4 = (
    -module(m).
    i ([x | y])=> x .
    
    z = m : i ([1, 2]) .
 ) .

  eq fun5 = (
    -module(m).
    i ([x | y])=> (x = 1) .
    
    z = m : i ([1, 2]) .
 ) .

  eq fun6 = (
    -module(m).
    i ([1 | y])=> y .
    
    y = 3 .
    z = m : i ([1, 2]) .
 ) .

--- adapted from the Erlang manual
  eq tup = (p = {"adam",24,29}. --- can't have exps here
            a = element(1,p).
            b = element(3,p).
---            q = setelement(2,p,25) .
            c = tuple-size(p).
            d = tuple-size({}).
           ) .

  eq lst = (
    l = ["a",2,"c"].
    [h | t] = l .
    m = ["d" | t].
    a = length(l).
    b = length([]).
  ).

  eq pmatch = (
    x = 2 .
    {x, y} = {1, 2}.
  ) .

---  eq fun3 = (
---    -module(demo).
---    -export([double/1]).
---    
---    double(X) -> times(X, 2).
---    
---    times(X, N) -> X * N.
---  ) .

  eq mod1 = (
    -module(m).          
---    -export([f // 1]).   
    f(n)=> n * f(n - 1) .      
  ) .

  eq proc1 = (
-module(m).
--- -export([loop/0]).
l()=>
    receive
        "who_are_you" ~>
            m = self(),
            l()
    end .
p = spawn(m, l, []).
p ! "testing" .
p ! "who_are_you" .
p ! "testing" .
  ) .

endm)
